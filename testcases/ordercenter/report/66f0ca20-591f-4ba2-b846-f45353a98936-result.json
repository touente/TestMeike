{"name": "正常获取订单列表", "status": "broken", "statusDetails": {"message": "TypeError: request() got an unexpected keyword argument 'extract_data'", "trace": "self = <testcases.ordercenter.test_order.TestOrder object at 0x000002600D2E7448>\ndata = {'case_info': {'extract_data': {'order_id': '$.[0].id'}, 'params': None}, 'request_info': {'case_story': '订单列表接口', 'he...yIS9A7wAytSnr7ATwO-nh32iwM7y75m3IfrG7Jj176E', 'Content-Type': 'application/json'}, 'method': 'GET', 'url': '/orders/'}}\nlogin_token = {'Authorization': 'JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxMDAwNTk0NSwidXNlcm5hbWUiOiIxNzYyMTk0Nzc3NyIsImV4cCI6MTcxNDExNTMwNSwiZW1haWwiOm51bGx9.yIS9A7wAytSnr7ATwO-nh32iwM7y75m3IfrG7Jj176E'}\n\n    @pytest.mark.parametrize(\"data\", yaml_util.extract_case('order_center.yaml', 'order_list'))\n    def test_order_list(self, data, login_token):\n>       api_service.handle_case(data, login_token)\n\ntest_order.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\core\\ApiService.py:31: in handle_case\n    result = self.session.do_request(url=url, method=method, headers=headers, **case_info)\n..\\..\\core\\rest_client.py:15: in do_request\n    response = self.request(url, method, **kwargs).json()\n..\\..\\core\\rest_client.py:22: in request\n    return requests.get(self.api_url + url, **kwargs)\n..\\..\\venv\\lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'get', url = 'http://admin.5istudy.online/orders/'\nkwargs = {'extract_data': {'order_id': '$.[0].id'}, 'headers': {'Authorization': 'JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1...NSwiZW1haWwiOm51bGx9.yIS9A7wAytSnr7ATwO-nh32iwM7y75m3IfrG7Jj176E', 'Content-Type': 'application/json'}, 'params': None}\nsession = <requests.sessions.Session object at 0x000002600D061088>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: request() got an unexpected keyword argument 'extract_data'\n\n..\\..\\venv\\lib\\site-packages\\requests\\api.py:59: TypeError"}, "attachments": [{"name": "log", "source": "4579ae72-1720-431d-8785-249c23fdc911-attachment.txt", "type": "text/plain"}], "start": 1713510478321, "stop": 1713510478321, "uuid": "4e280bf3-b01f-48ac-93e5-463b23c4b5de", "historyId": "65a6736c27c36b1e6fb89d417cab5de2", "testCaseId": "2fa6aa3b3ecdbc77a521bdc3552595c9", "fullName": "testcases.ordercenter.test_order.TestOrder#test_order_list", "labels": [{"name": "story", "value": "登录接口"}, {"name": "story", "value": "订单列表接口"}, {"name": "feature", "value": "用户订单模块"}, {"name": "parentSuite", "value": "testcases.ordercenter"}, {"name": "suite", "value": "test_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "WIN-20231207OXO"}, {"name": "thread", "value": "4164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.ordercenter.test_order"}]}